{
  "version": 3,
  "sources": [
    "/Users/sriram/Developer/algorand/tradeflow/projects/tradeflow-contracts/smart_contracts/tradeflow/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBE;AAA2D;AAA3D;AAFF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;AAAA;;AAyKG;;AAAA;AAAA;AAAA;;AAAA;AAzKH;;;AAAA;;;AAyKG;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AArJH;;;AAqJG;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA7BA;;AAAA;AAAA;AAAA;;AAAA;AAxHH;;;AAwHG;;;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AApGH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAoGG;;;AAAA;;AAvCA;;AAAA;AAAA;AAAA;;AAAA;AA7DH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AA6DG;;;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AA7CH;;;AA6CG;;;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AAxBH;;;AAAA;;;AAAA;;;AAAA;;;AAwBG;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAxBH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAwBE;;;AAtBA;AAAA;AAAA;AAAA;AAyB6B;AAAY;AAAZ;AAzB7B;AAyBE;AAAA;AAGA;AAzBoD;;AAAA;;AAAA;AAyBT;;AAA3C;AAxBmD;AAAA;;AAAA;AAyBnD;;AAAA;AAxBwD;AAAA;;AAAA;AAyBA;;AAAA;AAAxD;AAAA;AAxByD;;AAAA;;AAAA;AAyBL;AAApD;AAAA;AAAA;;AAAA;AAxB0D;;AAAA;;AAAA;AAyBE;;AAAA;AAA5D;AAAA;AAxBoD;;;;AAAA;;AAAA;AAyBJ;;AAAA;AAAhD;AAAA;AAxBoD;AAAA;;AAAA;AAyBpD;AAAA;AAEA;AAOF;;;AAEQ;;AAAe;AACd;AA1C4C;AAAA;;AAAA;AA0CrB;AAAA;AAAA;;AAA9B;AACW;;AAAkC;AAAA;AAAA;AAAtC;AAAP;AAtCoD;AAAA;AAAA;AAuCpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAzB;AAAP;AAtD0B;AAwD1B;AAAA;;AASF;;;AAEQ;;AAAe;AACd;AA3D6C;;AAAA;;AAAA;AA2DrB;AAAA;AAAA;;AAA/B;AArDoD;AAAA;;AAAA;AAAA;AAAA;;AAsDpB;AAAA;AAAA;AAAA;AAAA;AArEN;AAqEnB;AAAP;AA1DwD;AAAA;;AAAA;AA4DP;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA3DQ;;AAAA;;AAAA;AAAA;AAAA;;AA4DN;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA3DO;;AAAA;;AAAA;AA4DL;AAAA;AAAA;AAAA;AAAA;AACd;AAAA;AAAA;AAGxB;;AAAA;;AAAR;AAAP;AACe;;AAAA;;AAAA;AAAA;;AAAR;AAAA;;AAAA;AAAP;AACyB;;AAAA;AAAlB;AAAP;AAGqD;;AAAA;;AAA/B;AAhEyB;;AAAA;AAAA;AAAA;AAiEmB;AAAA;;AAAhC;;;AACE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI;;AAAA;AAAA;;AAAA;AAAxC;AAAA;;AAAA;AAAA;AAGM;;AAA0B;AAChC;AAAA;AAAA;;AAAA;AAAA;AAGI;;AAAA;AAAJ;;;AA5F0B;AA6FxB;AAAA;;AAAA;AAAA;;AATS;;;;AAmBb;;;AAEQ;;AAAe;AACd;AAjG4C;AAAA;;AAAA;AAiGrB;AAAA;AAAA;;AAA9B;AACW;;AAAkC;AAAA;AAAA;AAAtC;AAAP;AA7FoD;AAAA;;AAAA;AA8FpB;AAAA;AAAA;AAAA;AAAA;AAAA;AA5GN;AA4GnB;AAAP;AAGe;;AAAA;;AAAoB;;AAA5B;AAAP;AACe;;AAAA;;AAtGyC;AAAA;;AAAA;AAsGD;AAAA;AAAA;AAAA;AAAA;AAAhD;AAAP;AA/GwB;AAkHxB;AAAA;;AAQF;;;AAEQ;;AAAe;AACd;AAhH6C;AAAA;;AAAA;AAgHpB;AAAA;AAAA;AAAA;AAAA;AA7HR;AA6HjB;AAAP;AAGiD;;AAA3B;AAhHyB;;AAAA;AAAA;AAiHR;AAAA;AAAA;;AAAvC;AACiD;AAAA;AAAA;AAAA;AAAA;AAAA;AACjD;AAAA;AAGA;AAEkB;;;;;;AAFlB;;;AAIgB;;;AAJhB;AAS+C;AAA/C;AAAA;;AAQF;;;AAEQ;;AAAe;AACd;AAnJ6C;;AAAA;;AAAA;AAmJrB;AAAA;AAAA;;AAA/B;AAGsC;AAAA;AArJa;AAAA;;AAAA;AAsJd;AAAA;AArJmB;AAAA;;AAAA;AAsJb;AAAA;AAAA;AAAA;AAAA;AAAzC;AArJuD;;AAAA;;AAAA;AAsJb;AAAA;AAAA;AAAA;AAAA;AAA1C;AAnJkD;AAAA;;AAAA;AAoJb;AAAA;AAAA;AAAA;AAAA;AAArC;AALF;AAeF;;;AAEQ;;AAAe;AACW;AAA1B;;AAAgB;AA9JyB;;AAAA;AAAA;AAAA;AA+JA;AAAA;;AAAhC;;;AAAyE;;AAAA;AAAA;AAAA;AAAA;AAAA;AACjF;AAAP;AAAA;AADuG;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 2 3"
    },
    "7": {
      "op": "bytecblock \"st\" \"ib\" \"ia\" \"nextInvoiceId\" 0x151f7c75 \"is\" \"ir\" \"inv\" \"im\""
    },
    "50": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "52": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "55": {
      "op": "bytec_3 // \"nextInvoiceId\"",
      "defined_out": [
        "\"nextInvoiceId\""
      ],
      "stack_out": [
        "\"nextInvoiceId\""
      ]
    },
    "56": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"nextInvoiceId\"",
        "0"
      ],
      "stack_out": [
        "\"nextInvoiceId\"",
        "0"
      ]
    },
    "57": {
      "op": "app_global_put",
      "stack_out": []
    },
    "58": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "60": {
      "op": "bz main_bare_routing@14",
      "stack_out": []
    },
    "63": {
      "op": "pushbytess 0xf2a64e98 0x7cd8b57f 0xbb0c6942 0x429ccc4d 0x99932e33 0xeab8be70 0x414faa1c // method \"createInvoice(address,uint64,uint64,uint64)uint64\", method \"approveInvoice(uint64)void\", method \"investInInvoice(pay,uint64)void\", method \"payInvoice(pay,uint64)void\", method \"claimPayout(uint64)void\", method \"getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)\", method \"getInvestment(uint64,address)uint64\"",
      "defined_out": [
        "Method(approveInvoice(uint64)void)",
        "Method(claimPayout(uint64)void)",
        "Method(createInvoice(address,uint64,uint64,uint64)uint64)",
        "Method(getInvestment(uint64,address)uint64)",
        "Method(getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64))",
        "Method(investInInvoice(pay,uint64)void)",
        "Method(payInvoice(pay,uint64)void)"
      ],
      "stack_out": [
        "Method(createInvoice(address,uint64,uint64,uint64)uint64)",
        "Method(approveInvoice(uint64)void)",
        "Method(investInInvoice(pay,uint64)void)",
        "Method(payInvoice(pay,uint64)void)",
        "Method(claimPayout(uint64)void)",
        "Method(getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64))",
        "Method(getInvestment(uint64,address)uint64)"
      ]
    },
    "100": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(approveInvoice(uint64)void)",
        "Method(claimPayout(uint64)void)",
        "Method(createInvoice(address,uint64,uint64,uint64)uint64)",
        "Method(getInvestment(uint64,address)uint64)",
        "Method(getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64))",
        "Method(investInInvoice(pay,uint64)void)",
        "Method(payInvoice(pay,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createInvoice(address,uint64,uint64,uint64)uint64)",
        "Method(approveInvoice(uint64)void)",
        "Method(investInInvoice(pay,uint64)void)",
        "Method(payInvoice(pay,uint64)void)",
        "Method(claimPayout(uint64)void)",
        "Method(getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64))",
        "Method(getInvestment(uint64,address)uint64)",
        "tmp%2#0"
      ]
    },
    "103": {
      "op": "match main_createInvoice_route@5 main_approveInvoice_route@6 main_investInInvoice_route@7 main_payInvoice_route@8 main_claimPayout_route@9 main_getInvoiceInfo_route@10 main_getInvestment_route@11",
      "stack_out": []
    },
    "119": {
      "block": "main_after_if_else@18",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "120": {
      "op": "return",
      "stack_out": []
    },
    "121": {
      "block": "main_getInvestment_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "123": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "124": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "125": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "127": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "128": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "131": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "134": {
      "callsub": "smart_contracts/tradeflow/contract.algo.ts::Tradeflow.getInvestment",
      "op": "callsub getInvestment",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "137": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "0x151f7c75"
      ]
    },
    "139": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%36#0"
      ]
    },
    "140": {
      "op": "concat",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "141": {
      "op": "log",
      "stack_out": []
    },
    "142": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "143": {
      "op": "return",
      "stack_out": []
    },
    "144": {
      "block": "main_getInvoiceInfo_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "146": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "147": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "148": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "150": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "151": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "154": {
      "callsub": "smart_contracts/tradeflow/contract.algo.ts::Tradeflow.getInvoiceInfo",
      "op": "callsub getInvoiceInfo",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0"
      ]
    },
    "157": {
      "op": "uncover 4",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%0#0"
      ]
    },
    "159": {
      "op": "uncover 4",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "161": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "162": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_tuple_buffer%2#0",
        "elements_to_encode%2#0"
      ]
    },
    "164": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "165": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%4#0",
        "encoded_tuple_buffer%3#0",
        "elements_to_encode%3#0"
      ]
    },
    "167": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%4#0",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "168": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "elements_to_encode%4#0"
      ]
    },
    "169": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0"
      ]
    },
    "170": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "0x151f7c75"
      ]
    },
    "172": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "173": {
      "op": "concat",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "174": {
      "op": "log",
      "stack_out": []
    },
    "175": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "176": {
      "op": "return",
      "stack_out": []
    },
    "177": {
      "block": "main_claimPayout_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "179": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "180": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "181": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "183": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "184": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "187": {
      "callsub": "smart_contracts/tradeflow/contract.algo.ts::Tradeflow.claimPayout",
      "op": "callsub claimPayout",
      "stack_out": []
    },
    "190": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "191": {
      "op": "return",
      "stack_out": []
    },
    "192": {
      "block": "main_payInvoice_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "194": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "195": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "196": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "198": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "199": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "201": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "1"
      ]
    },
    "202": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "203": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "204": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "206": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "207": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "208": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "209": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "212": {
      "callsub": "smart_contracts/tradeflow/contract.algo.ts::Tradeflow.payInvoice",
      "op": "callsub payInvoice",
      "stack_out": []
    },
    "215": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "216": {
      "op": "return",
      "stack_out": []
    },
    "217": {
      "block": "main_investInInvoice_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "219": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "220": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "221": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "223": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "224": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "226": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "1"
      ]
    },
    "227": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "228": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "229": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "231": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "232": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "233": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "234": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "237": {
      "callsub": "smart_contracts/tradeflow/contract.algo.ts::Tradeflow.investInInvoice",
      "op": "callsub investInInvoice",
      "stack_out": []
    },
    "240": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "241": {
      "op": "return",
      "stack_out": []
    },
    "242": {
      "block": "main_approveInvoice_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "244": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "245": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "246": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "248": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "249": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "252": {
      "callsub": "smart_contracts/tradeflow/contract.algo.ts::Tradeflow.approveInvoice",
      "op": "callsub approveInvoice",
      "stack_out": []
    },
    "255": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "256": {
      "op": "return",
      "stack_out": []
    },
    "257": {
      "block": "main_createInvoice_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "259": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "260": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "261": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "263": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "264": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "267": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "270": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "273": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "276": {
      "callsub": "smart_contracts/tradeflow/contract.algo.ts::Tradeflow.createInvoice",
      "op": "callsub createInvoice",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "279": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0x151f7c75"
      ]
    },
    "281": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%7#0"
      ]
    },
    "282": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "283": {
      "op": "log",
      "stack_out": []
    },
    "284": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "285": {
      "op": "return",
      "stack_out": []
    },
    "286": {
      "block": "main_bare_routing@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "288": {
      "op": "bnz main_after_if_else@18",
      "stack_out": []
    },
    "291": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "293": {
      "op": "!",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "294": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "295": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "296": {
      "op": "return",
      "stack_out": []
    },
    "297": {
      "subroutine": "smart_contracts/tradeflow/contract.algo.ts::Tradeflow.createInvoice",
      "params": {
        "buyer#0": "bytes",
        "totalAmount#0": "bytes",
        "minInvestment#0": "bytes",
        "dueDate#0": "bytes"
      },
      "block": "createInvoice",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "300": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "301": {
      "op": "bytec_3 // \"nextInvoiceId\"",
      "defined_out": [
        "\"nextInvoiceId\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nextInvoiceId\""
      ]
    },
    "302": {
      "op": "app_global_get_ex",
      "defined_out": [
        "invoiceId#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "invoiceId#0",
        "maybe_exists%0#0"
      ]
    },
    "303": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "invoiceId#0"
      ]
    },
    "304": {
      "op": "dup",
      "defined_out": [
        "invoiceId#0",
        "invoiceId#0 (copy)"
      ],
      "stack_out": [
        "invoiceId#0",
        "invoiceId#0 (copy)"
      ]
    },
    "305": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "invoiceId#0",
        "invoiceId#0 (copy)"
      ],
      "stack_out": [
        "invoiceId#0",
        "invoiceId#0 (copy)",
        "1"
      ]
    },
    "306": {
      "op": "+",
      "defined_out": [
        "invoiceId#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "invoiceId#0",
        "new_state_value%0#0"
      ]
    },
    "307": {
      "op": "bytec_3 // \"nextInvoiceId\"",
      "stack_out": [
        "invoiceId#0",
        "new_state_value%0#0",
        "\"nextInvoiceId\""
      ]
    },
    "308": {
      "op": "swap",
      "stack_out": [
        "invoiceId#0",
        "\"nextInvoiceId\"",
        "new_state_value%0#0"
      ]
    },
    "309": {
      "op": "app_global_put",
      "stack_out": [
        "invoiceId#0"
      ]
    },
    "310": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "311": {
      "op": "bytec 5 // \"is\"",
      "defined_out": [
        "\"is\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"is\""
      ]
    },
    "313": {
      "op": "dig 1",
      "defined_out": [
        "\"is\"",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"is\"",
        "tmp%0#0 (copy)"
      ]
    },
    "315": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "316": {
      "op": "txn Sender",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "new_box_value%0#0"
      ]
    },
    "318": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "319": {
      "op": "bytec_1 // \"ib\"",
      "defined_out": [
        "\"ib\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"ib\""
      ]
    },
    "320": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "\"ib\"",
        "tmp%0#0 (copy)"
      ]
    },
    "322": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "323": {
      "op": "frame_dig -4",
      "defined_out": [
        "buyer#0 (copy)",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "buyer#0 (copy)"
      ]
    },
    "325": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "326": {
      "op": "bytec_2 // \"ia\"",
      "defined_out": [
        "\"ia\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"ia\""
      ]
    },
    "327": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "\"ia\"",
        "tmp%0#0 (copy)"
      ]
    },
    "329": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0"
      ]
    },
    "330": {
      "op": "frame_dig -3",
      "defined_out": [
        "tmp%0#0",
        "tmp%5#0",
        "totalAmount#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0",
        "totalAmount#0 (copy)"
      ]
    },
    "332": {
      "op": "btoi",
      "defined_out": [
        "new_box_value%1#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0",
        "new_box_value%1#0"
      ]
    },
    "333": {
      "op": "itob",
      "defined_out": [
        "new_box_value%2#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0",
        "new_box_value%2#0"
      ]
    },
    "334": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "335": {
      "op": "bytec 6 // \"ir\"",
      "defined_out": [
        "\"ir\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"ir\""
      ]
    },
    "337": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "\"ir\"",
        "tmp%0#0 (copy)"
      ]
    },
    "339": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "340": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "0"
      ]
    },
    "341": {
      "op": "itob",
      "defined_out": [
        "new_box_value%3#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "new_box_value%3#0"
      ]
    },
    "342": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "new_box_value%3#0",
        "tmp%7#0"
      ]
    },
    "343": {
      "op": "dig 1",
      "defined_out": [
        "new_box_value%3#0",
        "new_box_value%3#0 (copy)",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "new_box_value%3#0",
        "tmp%7#0",
        "new_box_value%3#0 (copy)"
      ]
    },
    "345": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "new_box_value%3#0"
      ]
    },
    "346": {
      "op": "bytec 8 // \"im\"",
      "defined_out": [
        "\"im\"",
        "new_box_value%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "new_box_value%3#0",
        "\"im\""
      ]
    },
    "348": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "new_box_value%3#0",
        "\"im\"",
        "tmp%0#0 (copy)"
      ]
    },
    "350": {
      "op": "concat",
      "defined_out": [
        "new_box_value%3#0",
        "tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "new_box_value%3#0",
        "tmp%9#0"
      ]
    },
    "351": {
      "op": "frame_dig -2",
      "defined_out": [
        "minInvestment#0 (copy)",
        "new_box_value%3#0",
        "tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "new_box_value%3#0",
        "tmp%9#0",
        "minInvestment#0 (copy)"
      ]
    },
    "353": {
      "op": "btoi",
      "defined_out": [
        "new_box_value%3#0",
        "new_box_value%4#0",
        "tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "new_box_value%3#0",
        "tmp%9#0",
        "new_box_value%4#0"
      ]
    },
    "354": {
      "op": "itob",
      "defined_out": [
        "new_box_value%3#0",
        "new_box_value%5#0",
        "tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "new_box_value%3#0",
        "tmp%9#0",
        "new_box_value%5#0"
      ]
    },
    "355": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "new_box_value%3#0"
      ]
    },
    "356": {
      "op": "pushbytes \"id\"",
      "defined_out": [
        "\"id\"",
        "new_box_value%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "new_box_value%3#0",
        "\"id\""
      ]
    },
    "360": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "new_box_value%3#0",
        "\"id\"",
        "tmp%0#0 (copy)"
      ]
    },
    "362": {
      "op": "concat",
      "defined_out": [
        "new_box_value%3#0",
        "tmp%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "new_box_value%3#0",
        "tmp%11#0"
      ]
    },
    "363": {
      "op": "frame_dig -1",
      "defined_out": [
        "dueDate#0 (copy)",
        "new_box_value%3#0",
        "tmp%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "new_box_value%3#0",
        "tmp%11#0",
        "dueDate#0 (copy)"
      ]
    },
    "365": {
      "op": "btoi",
      "defined_out": [
        "new_box_value%3#0",
        "new_box_value%6#0",
        "tmp%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "new_box_value%3#0",
        "tmp%11#0",
        "new_box_value%6#0"
      ]
    },
    "366": {
      "op": "itob",
      "defined_out": [
        "new_box_value%3#0",
        "new_box_value%7#0",
        "tmp%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "new_box_value%3#0",
        "tmp%11#0",
        "new_box_value%7#0"
      ]
    },
    "367": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "new_box_value%3#0"
      ]
    },
    "368": {
      "op": "bytec_0 // \"st\"",
      "defined_out": [
        "\"st\"",
        "new_box_value%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "new_box_value%3#0",
        "\"st\""
      ]
    },
    "369": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "new_box_value%3#0",
        "\"st\"",
        "tmp%0#0 (copy)"
      ]
    },
    "371": {
      "op": "concat",
      "defined_out": [
        "new_box_value%3#0",
        "tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "new_box_value%3#0",
        "tmp%13#0"
      ]
    },
    "372": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%13#0",
        "new_box_value%3#0"
      ]
    },
    "373": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "374": {
      "retsub": true,
      "op": "retsub"
    },
    "375": {
      "subroutine": "smart_contracts/tradeflow/contract.algo.ts::Tradeflow.approveInvoice",
      "params": {
        "invoiceId#0": "bytes"
      },
      "block": "approveInvoice",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "378": {
      "op": "frame_dig -1",
      "defined_out": [
        "invoiceId#0 (copy)"
      ],
      "stack_out": [
        "invoiceId#0 (copy)"
      ]
    },
    "380": {
      "op": "btoi",
      "defined_out": [
        "id#0"
      ],
      "stack_out": [
        "id#0"
      ]
    },
    "381": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "382": {
      "op": "bytec_1 // \"ib\"",
      "defined_out": [
        "\"ib\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"ib\""
      ]
    },
    "383": {
      "op": "dig 1",
      "defined_out": [
        "\"ib\"",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"ib\"",
        "tmp%0#0 (copy)"
      ]
    },
    "385": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "386": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "387": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "388": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "390": {
      "error": "Invoice does not exist",
      "op": "assert // Invoice does not exist",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "391": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "393": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0"
      ]
    },
    "394": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "395": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "396": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0"
      ]
    },
    "397": {
      "error": "Only buyer can approve",
      "op": "assert // Only buyer can approve",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "398": {
      "op": "bytec_0 // \"st\"",
      "defined_out": [
        "\"st\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"st\""
      ]
    },
    "399": {
      "op": "swap",
      "stack_out": [
        "\"st\"",
        "tmp%0#0"
      ]
    },
    "400": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "401": {
      "op": "dup",
      "defined_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "402": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "403": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "404": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value_converted%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "maybe_exists%2#0",
        "maybe_value_converted%0#0"
      ]
    },
    "405": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "maybe_value_converted%0#0",
        "maybe_exists%2#0"
      ]
    },
    "406": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%7#0",
        "maybe_value_converted%0#0"
      ]
    },
    "407": {
      "op": "!",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "408": {
      "error": "Invoice must be pending",
      "op": "assert // Invoice must be pending",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "409": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "1"
      ]
    },
    "410": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "new_box_value%0#0"
      ]
    },
    "411": {
      "op": "box_put",
      "stack_out": []
    },
    "412": {
      "retsub": true,
      "op": "retsub"
    },
    "413": {
      "subroutine": "smart_contracts/tradeflow/contract.algo.ts::Tradeflow.investInInvoice",
      "params": {
        "payment#0": "uint64",
        "invoiceId#0": "bytes"
      },
      "block": "investInInvoice",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "416": {
      "op": "frame_dig -1",
      "defined_out": [
        "invoiceId#0 (copy)"
      ],
      "stack_out": [
        "invoiceId#0 (copy)"
      ]
    },
    "418": {
      "op": "btoi",
      "defined_out": [
        "id#0"
      ],
      "stack_out": [
        "id#0"
      ]
    },
    "419": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "420": {
      "op": "bytec 5 // \"is\"",
      "defined_out": [
        "\"is\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"is\""
      ]
    },
    "422": {
      "op": "dig 1",
      "defined_out": [
        "\"is\"",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"is\"",
        "tmp%0#0 (copy)"
      ]
    },
    "424": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "425": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "426": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "427": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "429": {
      "error": "Invoice does not exist",
      "op": "assert // Invoice does not exist",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "430": {
      "op": "bytec_0 // \"st\"",
      "defined_out": [
        "\"st\"",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "\"st\""
      ]
    },
    "431": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "\"st\"",
        "tmp%0#0 (copy)"
      ]
    },
    "433": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "434": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "435": {
      "op": "cover 3",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "437": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "438": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "439": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "440": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value_converted%0#0",
        "maybe_exists%1#0"
      ]
    },
    "441": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "442": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value_converted%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value_converted%0#0",
        "1"
      ]
    },
    "443": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0"
      ]
    },
    "444": {
      "error": "Invoice must be active",
      "op": "assert // Invoice must be active",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "445": {
      "op": "bytec_2 // \"ia\"",
      "defined_out": [
        "\"ia\"",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "\"ia\""
      ]
    },
    "446": {
      "op": "dig 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "\"ia\"",
        "tmp%0#0 (copy)"
      ]
    },
    "448": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "449": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "450": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "451": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "maybe_exists%2#0",
        "totalAmount#0"
      ]
    },
    "452": {
      "op": "dup",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "maybe_exists%2#0",
        "totalAmount#0",
        "totalAmount#0 (copy)"
      ]
    },
    "453": {
      "op": "cover 3",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "totalAmount#0",
        "tmp%1#0",
        "maybe_exists%2#0",
        "totalAmount#0"
      ]
    },
    "455": {
      "op": "cover 4",
      "defined_out": [
        "maybe_exists%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%0#0",
        "totalAmount#0",
        "tmp%1#0",
        "maybe_exists%2#0"
      ]
    },
    "457": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%0#0",
        "totalAmount#0",
        "tmp%1#0"
      ]
    },
    "458": {
      "op": "bytec 6 // \"ir\"",
      "defined_out": [
        "\"ir\"",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%0#0",
        "totalAmount#0",
        "tmp%1#0",
        "\"ir\""
      ]
    },
    "460": {
      "op": "dig 3",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%0#0",
        "totalAmount#0",
        "tmp%1#0",
        "\"ir\"",
        "tmp%0#0 (copy)"
      ]
    },
    "462": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%0#0",
        "totalAmount#0",
        "tmp%1#0",
        "tmp%8#0"
      ]
    },
    "463": {
      "op": "dup",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%0#0",
        "totalAmount#0",
        "tmp%1#0",
        "tmp%8#0",
        "tmp%8#0"
      ]
    },
    "464": {
      "op": "cover 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "tmp%0#0",
        "totalAmount#0",
        "tmp%1#0",
        "tmp%8#0"
      ]
    },
    "466": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "tmp%0#0",
        "totalAmount#0",
        "tmp%1#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "467": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "tmp%0#0",
        "totalAmount#0",
        "tmp%1#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ]
    },
    "468": {
      "op": "btoi",
      "defined_out": [
        "amountRaised#0",
        "maybe_exists%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "tmp%0#0",
        "totalAmount#0",
        "tmp%1#0",
        "maybe_exists%3#0",
        "amountRaised#0"
      ]
    },
    "469": {
      "op": "dup",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "tmp%0#0",
        "totalAmount#0",
        "tmp%1#0",
        "maybe_exists%3#0",
        "amountRaised#0",
        "amountRaised#0 (copy)"
      ]
    },
    "470": {
      "op": "cover 3",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "tmp%1#0",
        "maybe_exists%3#0",
        "amountRaised#0"
      ]
    },
    "472": {
      "op": "cover 5",
      "defined_out": [
        "amountRaised#0",
        "maybe_exists%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "tmp%1#0",
        "maybe_exists%3#0"
      ]
    },
    "474": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "tmp%1#0"
      ]
    },
    "475": {
      "op": "bytec 8 // \"im\"",
      "defined_out": [
        "\"im\"",
        "amountRaised#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "tmp%1#0",
        "\"im\""
      ]
    },
    "477": {
      "op": "dig 4",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "tmp%1#0",
        "\"im\"",
        "tmp%0#0 (copy)"
      ]
    },
    "479": {
      "op": "concat",
      "defined_out": [
        "amountRaised#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "tmp%1#0",
        "tmp%10#0"
      ]
    },
    "480": {
      "op": "box_get",
      "defined_out": [
        "amountRaised#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "tmp%1#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "481": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "tmp%1#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ]
    },
    "482": {
      "op": "btoi",
      "defined_out": [
        "amountRaised#0",
        "maybe_exists%4#0",
        "minInvestment#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "tmp%1#0",
        "maybe_exists%4#0",
        "minInvestment#0"
      ]
    },
    "483": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "tmp%1#0",
        "minInvestment#0",
        "maybe_exists%4#0"
      ]
    },
    "484": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "tmp%1#0",
        "minInvestment#0"
      ]
    },
    "485": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "minInvestment#0",
        "tmp%1#0"
      ]
    },
    "486": {
      "op": "box_get",
      "defined_out": [
        "amountRaised#0",
        "maybe_exists%5#0",
        "minInvestment#0",
        "seller#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "minInvestment#0",
        "seller#0",
        "maybe_exists%5#0"
      ]
    },
    "487": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "minInvestment#0",
        "seller#0"
      ]
    },
    "488": {
      "op": "frame_dig -2",
      "defined_out": [
        "amountRaised#0",
        "minInvestment#0",
        "payment#0 (copy)",
        "seller#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "minInvestment#0",
        "seller#0",
        "payment#0 (copy)"
      ]
    },
    "490": {
      "op": "gtxns Receiver",
      "defined_out": [
        "amountRaised#0",
        "minInvestment#0",
        "seller#0",
        "tmp%0#0",
        "tmp%13#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "minInvestment#0",
        "seller#0",
        "tmp%13#0"
      ]
    },
    "492": {
      "op": "==",
      "defined_out": [
        "amountRaised#0",
        "minInvestment#0",
        "tmp%0#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "minInvestment#0",
        "tmp%14#0"
      ]
    },
    "493": {
      "error": "Payment must go to seller",
      "op": "assert // Payment must go to seller",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "minInvestment#0"
      ]
    },
    "494": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "minInvestment#0",
        "payment#0 (copy)"
      ]
    },
    "496": {
      "op": "gtxns Amount",
      "defined_out": [
        "amountRaised#0",
        "minInvestment#0",
        "tmp%0#0",
        "tmp%15#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "minInvestment#0",
        "tmp%15#0"
      ]
    },
    "498": {
      "op": "dup",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "minInvestment#0",
        "tmp%15#0",
        "tmp%15#0"
      ]
    },
    "499": {
      "op": "cover 5",
      "defined_out": [
        "amountRaised#0",
        "minInvestment#0",
        "tmp%0#0",
        "tmp%15#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "minInvestment#0",
        "tmp%15#0"
      ]
    },
    "501": {
      "op": "dup",
      "defined_out": [
        "amountRaised#0",
        "minInvestment#0",
        "tmp%0#0",
        "tmp%15#0",
        "tmp%15#0 (copy)",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "minInvestment#0",
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ]
    },
    "502": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%15#0 (copy)",
        "minInvestment#0"
      ]
    },
    "504": {
      "op": ">=",
      "defined_out": [
        "amountRaised#0",
        "tmp%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "505": {
      "error": "Below minimum investment",
      "op": "assert // Below minimum investment",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%0#0",
        "totalAmount#0",
        "amountRaised#0",
        "tmp%15#0"
      ]
    },
    "506": {
      "op": "cover 2",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%0#0",
        "tmp%15#0",
        "totalAmount#0",
        "amountRaised#0"
      ]
    },
    "508": {
      "op": "-",
      "defined_out": [
        "amountRaised#0",
        "tmp%0#0",
        "tmp%15#0",
        "tmp%18#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%0#0",
        "tmp%15#0",
        "tmp%18#0"
      ]
    },
    "509": {
      "op": "<=",
      "defined_out": [
        "amountRaised#0",
        "tmp%0#0",
        "tmp%15#0",
        "tmp%19#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%0#0",
        "tmp%19#0"
      ]
    },
    "510": {
      "error": "Exceeds funding need",
      "op": "assert // Exceeds funding need",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%0#0"
      ]
    },
    "511": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%0#0",
        "payment#0 (copy)"
      ]
    },
    "513": {
      "op": "gtxns Sender",
      "defined_out": [
        "amountRaised#0",
        "tmp%0#0",
        "tmp%15#0",
        "tmp%21#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%0#0",
        "tmp%21#0"
      ]
    },
    "515": {
      "op": "concat",
      "defined_out": [
        "amountRaised#0",
        "investmentKey#0",
        "tmp%15#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "investmentKey#0"
      ]
    },
    "516": {
      "op": "bytec 7 // \"inv\"",
      "defined_out": [
        "\"inv\"",
        "amountRaised#0",
        "investmentKey#0",
        "tmp%15#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "investmentKey#0",
        "\"inv\""
      ]
    },
    "518": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "\"inv\"",
        "investmentKey#0"
      ]
    },
    "519": {
      "op": "concat",
      "defined_out": [
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0"
      ]
    },
    "520": {
      "op": "dup",
      "defined_out": [
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%22#0"
      ]
    },
    "521": {
      "op": "box_len",
      "defined_out": [
        "amountRaised#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "522": {
      "op": "bury 1",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "maybe_exists%6#0"
      ]
    },
    "524": {
      "op": "bz investInInvoice_ternary_false@2",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0"
      ]
    },
    "527": {
      "op": "frame_dig 5",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%22#0"
      ]
    },
    "529": {
      "op": "box_get",
      "defined_out": [
        "amountRaised#0",
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "530": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ]
    },
    "531": {
      "op": "btoi",
      "defined_out": [
        "amountRaised#0",
        "maybe_exists%7#0",
        "maybe_value_converted%4#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "maybe_exists%7#0",
        "maybe_value_converted%4#0"
      ]
    },
    "532": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "maybe_value_converted%4#0",
        "maybe_exists%7#0"
      ]
    },
    "533": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "defined_out": [
        "amountRaised#0",
        "currentInvestment#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "currentInvestment#0"
      ]
    },
    "534": {
      "block": "investInInvoice_ternary_merge@3",
      "stack_in": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "currentInvestment#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "currentInvestment#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "currentInvestment#0",
        "tmp%15#0"
      ]
    },
    "536": {
      "op": "dup",
      "defined_out": [
        "currentInvestment#0",
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "currentInvestment#0",
        "tmp%15#0 (copy)",
        "tmp%15#0 (copy)"
      ]
    },
    "537": {
      "op": "cover 2",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%15#0",
        "currentInvestment#0",
        "tmp%15#0 (copy)"
      ]
    },
    "539": {
      "op": "+",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%15#0",
        "new_box_value%0#0"
      ]
    },
    "540": {
      "op": "itob",
      "defined_out": [
        "new_box_value%1#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%15#0",
        "new_box_value%1#0"
      ]
    },
    "541": {
      "op": "frame_dig 5",
      "defined_out": [
        "new_box_value%1#0",
        "tmp%15#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%15#0",
        "new_box_value%1#0",
        "tmp%22#0"
      ]
    },
    "543": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%15#0",
        "tmp%22#0",
        "new_box_value%1#0"
      ]
    },
    "544": {
      "op": "box_put",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%15#0"
      ]
    },
    "545": {
      "op": "frame_dig 3",
      "defined_out": [
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%15#0",
        "amountRaised#0"
      ]
    },
    "547": {
      "op": "+",
      "defined_out": [
        "amountRaised#0",
        "newAmountRaised#0",
        "tmp%15#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "newAmountRaised#0"
      ]
    },
    "548": {
      "op": "dup",
      "defined_out": [
        "amountRaised#0",
        "newAmountRaised#0",
        "newAmountRaised#0 (copy)",
        "tmp%15#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "newAmountRaised#0",
        "newAmountRaised#0 (copy)"
      ]
    },
    "549": {
      "op": "itob",
      "defined_out": [
        "amountRaised#0",
        "newAmountRaised#0",
        "new_box_value%2#0",
        "tmp%15#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "newAmountRaised#0",
        "new_box_value%2#0"
      ]
    },
    "550": {
      "op": "frame_dig 2",
      "defined_out": [
        "amountRaised#0",
        "newAmountRaised#0",
        "new_box_value%2#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "newAmountRaised#0",
        "new_box_value%2#0",
        "tmp%8#0"
      ]
    },
    "552": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "newAmountRaised#0",
        "tmp%8#0",
        "new_box_value%2#0"
      ]
    },
    "553": {
      "op": "box_put",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "newAmountRaised#0"
      ]
    },
    "554": {
      "op": "frame_dig 1",
      "defined_out": [
        "amountRaised#0",
        "newAmountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "newAmountRaised#0",
        "totalAmount#0"
      ]
    },
    "556": {
      "op": ">=",
      "defined_out": [
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%29#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%29#0"
      ]
    },
    "557": {
      "op": "bz investInInvoice_after_if_else@5",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0"
      ]
    },
    "560": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "2"
      ]
    },
    "561": {
      "op": "itob",
      "defined_out": [
        "amountRaised#0",
        "new_box_value%3#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "new_box_value%3#0"
      ]
    },
    "562": {
      "op": "frame_dig 0",
      "defined_out": [
        "amountRaised#0",
        "new_box_value%3#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%3#0",
        "tmp%8#0",
        "totalAmount#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "new_box_value%3#0",
        "tmp%3#0"
      ]
    },
    "564": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%3#0",
        "new_box_value%3#0"
      ]
    },
    "565": {
      "op": "box_put",
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0"
      ]
    },
    "566": {
      "block": "investInInvoice_after_if_else@5",
      "stack_in": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "567": {
      "block": "investInInvoice_ternary_false@2",
      "stack_in": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "currentInvestment#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "totalAmount#0",
        "tmp%8#0",
        "amountRaised#0",
        "tmp%15#0",
        "tmp%22#0",
        "currentInvestment#0"
      ]
    },
    "568": {
      "op": "b investInInvoice_ternary_merge@3"
    },
    "571": {
      "subroutine": "smart_contracts/tradeflow/contract.algo.ts::Tradeflow.payInvoice",
      "params": {
        "payment#0": "uint64",
        "invoiceId#0": "bytes"
      },
      "block": "payInvoice",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "574": {
      "op": "frame_dig -1",
      "defined_out": [
        "invoiceId#0 (copy)"
      ],
      "stack_out": [
        "invoiceId#0 (copy)"
      ]
    },
    "576": {
      "op": "btoi",
      "defined_out": [
        "id#0"
      ],
      "stack_out": [
        "id#0"
      ]
    },
    "577": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "578": {
      "op": "bytec_1 // \"ib\"",
      "defined_out": [
        "\"ib\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"ib\""
      ]
    },
    "579": {
      "op": "dig 1",
      "defined_out": [
        "\"ib\"",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"ib\"",
        "tmp%0#0 (copy)"
      ]
    },
    "581": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "582": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "583": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "584": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "586": {
      "error": "Invoice does not exist",
      "op": "assert // Invoice does not exist",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "587": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "589": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0"
      ]
    },
    "590": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "591": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "592": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0"
      ]
    },
    "593": {
      "error": "Only buyer can pay invoice",
      "op": "assert // Only buyer can pay invoice",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "594": {
      "op": "bytec_0 // \"st\"",
      "defined_out": [
        "\"st\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"st\""
      ]
    },
    "595": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "\"st\"",
        "tmp%0#0 (copy)"
      ]
    },
    "597": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "598": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "599": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "600": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "601": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value_converted%0#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "maybe_exists%2#0",
        "maybe_value_converted%0#0"
      ]
    },
    "602": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "maybe_value_converted%0#0",
        "maybe_exists%2#0"
      ]
    },
    "603": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "maybe_value_converted%0#0"
      ]
    },
    "604": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "maybe_value_converted%0#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "maybe_value_converted%0#0",
        "2"
      ]
    },
    "605": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "606": {
      "error": "Invoice must be funded",
      "op": "assert // Invoice must be funded",
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "607": {
      "op": "frame_dig -2",
      "defined_out": [
        "payment#0 (copy)",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "payment#0 (copy)"
      ]
    },
    "609": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "611": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "613": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%11#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%11#0"
      ]
    },
    "614": {
      "error": "Payment must go to contract",
      "op": "assert // Payment must go to contract",
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "615": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "payment#0 (copy)"
      ]
    },
    "617": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%12#0"
      ]
    },
    "619": {
      "op": "bytec_2 // \"ia\"",
      "defined_out": [
        "\"ia\"",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%12#0",
        "\"ia\""
      ]
    },
    "620": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%7#0",
        "tmp%12#0",
        "\"ia\"",
        "tmp%0#0"
      ]
    },
    "622": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0",
        "tmp%14#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%12#0",
        "tmp%14#0"
      ]
    },
    "623": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%12#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%12#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "624": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "tmp%12#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ]
    },
    "625": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value_converted%1#0",
        "tmp%12#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%12#0",
        "maybe_exists%3#0",
        "maybe_value_converted%1#0"
      ]
    },
    "626": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "tmp%12#0",
        "maybe_value_converted%1#0",
        "maybe_exists%3#0"
      ]
    },
    "627": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%7#0",
        "tmp%12#0",
        "maybe_value_converted%1#0"
      ]
    },
    "628": {
      "op": "==",
      "defined_out": [
        "tmp%15#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%15#0"
      ]
    },
    "629": {
      "error": "Wrong payment amount",
      "op": "assert // Wrong payment amount",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "630": {
      "op": "intc_3 // 3",
      "defined_out": [
        "3",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "3"
      ]
    },
    "631": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "new_box_value%0#0"
      ]
    },
    "632": {
      "op": "box_put",
      "stack_out": []
    },
    "633": {
      "retsub": true,
      "op": "retsub"
    },
    "634": {
      "subroutine": "smart_contracts/tradeflow/contract.algo.ts::Tradeflow.claimPayout",
      "params": {
        "invoiceId#0": "bytes"
      },
      "block": "claimPayout",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "637": {
      "op": "frame_dig -1",
      "defined_out": [
        "invoiceId#0 (copy)"
      ],
      "stack_out": [
        "invoiceId#0 (copy)"
      ]
    },
    "639": {
      "op": "btoi",
      "defined_out": [
        "id#0"
      ],
      "stack_out": [
        "id#0"
      ]
    },
    "640": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "641": {
      "op": "bytec_0 // \"st\"",
      "defined_out": [
        "\"st\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"st\""
      ]
    },
    "642": {
      "op": "dig 1",
      "defined_out": [
        "\"st\"",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"st\"",
        "tmp%0#0 (copy)"
      ]
    },
    "644": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "645": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "646": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "647": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "648": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "649": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "650": {
      "op": "intc_3 // 3",
      "defined_out": [
        "3",
        "maybe_value_converted%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value_converted%0#0",
        "3"
      ]
    },
    "651": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "652": {
      "error": "Invoice not paid yet",
      "op": "assert // Invoice not paid yet",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "653": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "655": {
      "op": "concat",
      "defined_out": [
        "investmentKey#0"
      ],
      "stack_out": [
        "investmentKey#0"
      ]
    },
    "656": {
      "op": "bytec 7 // \"inv\"",
      "defined_out": [
        "\"inv\"",
        "investmentKey#0"
      ],
      "stack_out": [
        "investmentKey#0",
        "\"inv\""
      ]
    },
    "658": {
      "op": "swap",
      "stack_out": [
        "\"inv\"",
        "investmentKey#0"
      ]
    },
    "659": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "660": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "661": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "662": {
      "op": "bury 1",
      "stack_out": [
        "tmp%5#0",
        "maybe_exists%1#0"
      ]
    },
    "664": {
      "error": "No investment found",
      "op": "assert // No investment found",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "665": {
      "op": "dup",
      "stack_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "666": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "667": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "668": {
      "op": "btoi",
      "defined_out": [
        "invested#0",
        "maybe_exists%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_exists%2#0",
        "invested#0"
      ]
    },
    "669": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "invested#0",
        "maybe_exists%2#0"
      ]
    },
    "670": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%5#0",
        "invested#0"
      ]
    },
    "671": {
      "op": "dup",
      "defined_out": [
        "invested#0",
        "invested#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "invested#0",
        "invested#0 (copy)"
      ]
    },
    "672": {
      "error": "Already claimed or no investment",
      "op": "assert // Already claimed or no investment",
      "stack_out": [
        "tmp%5#0",
        "invested#0"
      ]
    },
    "673": {
      "op": "itxn_begin"
    },
    "674": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "invested#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "invested#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "676": {
      "op": "itxn_field Receiver"
    },
    "678": {
      "op": "itxn_field Amount",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "680": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "1"
      ]
    },
    "681": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "683": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "684": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "686": {
      "op": "itxn_submit"
    },
    "687": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "688": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "new_box_value%0#0"
      ]
    },
    "689": {
      "op": "box_put",
      "stack_out": []
    },
    "690": {
      "retsub": true,
      "op": "retsub"
    },
    "691": {
      "subroutine": "smart_contracts/tradeflow/contract.algo.ts::Tradeflow.getInvoiceInfo",
      "params": {
        "invoiceId#0": "bytes"
      },
      "block": "getInvoiceInfo",
      "stack_in": [],
      "op": "proto 1 5"
    },
    "694": {
      "op": "frame_dig -1",
      "defined_out": [
        "invoiceId#0 (copy)"
      ],
      "stack_out": [
        "invoiceId#0 (copy)"
      ]
    },
    "696": {
      "op": "btoi",
      "defined_out": [
        "id#0"
      ],
      "stack_out": [
        "id#0"
      ]
    },
    "697": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "698": {
      "op": "bytec 5 // \"is\"",
      "defined_out": [
        "\"is\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"is\""
      ]
    },
    "700": {
      "op": "dig 1",
      "defined_out": [
        "\"is\"",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"is\"",
        "tmp%0#0 (copy)"
      ]
    },
    "702": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "703": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "704": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "705": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "707": {
      "error": "Invoice does not exist",
      "op": "assert // Invoice does not exist",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "708": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "709": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "710": {
      "op": "bytec_1 // \"ib\"",
      "defined_out": [
        "\"ib\"",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "\"ib\""
      ]
    },
    "711": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "\"ib\"",
        "tmp%0#0 (copy)"
      ]
    },
    "713": {
      "op": "concat",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "tmp%5#0"
      ]
    },
    "714": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "715": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "716": {
      "op": "bytec_2 // \"ia\"",
      "defined_out": [
        "\"ia\"",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "\"ia\""
      ]
    },
    "717": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "\"ia\"",
        "tmp%0#0 (copy)"
      ]
    },
    "719": {
      "op": "concat",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%7#0"
      ]
    },
    "720": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "721": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ]
    },
    "722": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%3#0",
        "maybe_value_converted%0#0"
      ]
    },
    "723": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_exists%3#0"
      ]
    },
    "724": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0"
      ]
    },
    "725": {
      "op": "itob",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "726": {
      "op": "bytec 6 // \"ir\"",
      "defined_out": [
        "\"ir\"",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "\"ir\""
      ]
    },
    "728": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "\"ir\"",
        "tmp%0#0 (copy)"
      ]
    },
    "730": {
      "op": "concat",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "tmp%9#0"
      ]
    },
    "731": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "732": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ]
    },
    "733": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%1#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "maybe_exists%4#0",
        "maybe_value_converted%1#0"
      ]
    },
    "734": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "maybe_value_converted%1#0",
        "maybe_exists%4#0"
      ]
    },
    "735": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "maybe_value_converted%1#0"
      ]
    },
    "736": {
      "op": "itob",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "737": {
      "op": "bytec_0 // \"st\"",
      "defined_out": [
        "\"st\"",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "\"st\""
      ]
    },
    "738": {
      "op": "uncover 5",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "\"st\"",
        "tmp%0#0"
      ]
    },
    "740": {
      "op": "concat",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%11#0"
      ]
    },
    "741": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "742": {
      "op": "swap",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ]
    },
    "743": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_exists%5#0",
        "maybe_value_converted%2#0"
      ]
    },
    "744": {
      "op": "swap",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value_converted%2#0",
        "maybe_exists%5#0"
      ]
    },
    "745": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value_converted%2#0"
      ]
    },
    "746": {
      "op": "itob",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "747": {
      "retsub": true,
      "op": "retsub"
    },
    "748": {
      "subroutine": "smart_contracts/tradeflow/contract.algo.ts::Tradeflow.getInvestment",
      "params": {
        "invoiceId#0": "bytes",
        "investor#0": "bytes"
      },
      "block": "getInvestment",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "751": {
      "op": "frame_dig -2",
      "defined_out": [
        "invoiceId#0 (copy)"
      ],
      "stack_out": [
        "invoiceId#0 (copy)"
      ]
    },
    "753": {
      "op": "btoi",
      "defined_out": [
        "id#0"
      ],
      "stack_out": [
        "id#0"
      ]
    },
    "754": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "755": {
      "op": "frame_dig -1",
      "defined_out": [
        "investor#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "investor#0 (copy)"
      ]
    },
    "757": {
      "op": "concat",
      "defined_out": [
        "investmentKey#0"
      ],
      "stack_out": [
        "investmentKey#0"
      ]
    },
    "758": {
      "op": "bytec 7 // \"inv\"",
      "defined_out": [
        "\"inv\"",
        "investmentKey#0"
      ],
      "stack_out": [
        "investmentKey#0",
        "\"inv\""
      ]
    },
    "760": {
      "op": "swap",
      "stack_out": [
        "\"inv\"",
        "investmentKey#0"
      ]
    },
    "761": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "762": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "763": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "764": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "766": {
      "op": "bz getInvestment_ternary_false@2",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "769": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "771": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "772": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "773": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "774": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "maybe_value_converted%0#0",
        "maybe_exists%1#0"
      ]
    },
    "775": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "defined_out": [
        "amount#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "amount#0"
      ]
    },
    "776": {
      "block": "getInvestment_ternary_merge@3",
      "stack_in": [
        "tmp%1#0",
        "amount#0"
      ],
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "777": {
      "op": "swap"
    },
    "778": {
      "retsub": true,
      "op": "retsub"
    },
    "779": {
      "block": "getInvestment_ternary_false@2",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "amount#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "amount#0"
      ]
    },
    "780": {
      "op": "b getInvestment_ternary_merge@3"
    }
  }
}