/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Tradeflow","structs":{},"methods":[{"name":"createInvoice","args":[{"type":"address","name":"buyer","desc":"- The company that will pay the invoice"},{"type":"uint64","name":"totalAmount","desc":"- Total face value of the invoice in microAlgos"},{"type":"uint64","name":"minInvestment","desc":"- Minimum investment amount in microAlgos"},{"type":"uint64","name":"dueDate","desc":"- Unix timestamp when invoice is due"}],"returns":{"type":"uint64","desc":"The new invoice ID"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Creates a new invoice","events":[],"recommendations":{}},{"name":"approveInvoice","args":[{"type":"uint64","name":"invoiceId","desc":"- The invoice to approve"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Buyer approves an invoice, making it available for investment","events":[],"recommendations":{}},{"name":"investInInvoice","args":[{"type":"pay","name":"payment","desc":"- The payment transaction (must be first in group)"},{"type":"uint64","name":"invoiceId","desc":"- The invoice to invest in"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Investor buys part of an invoice\nMust be called in a group transaction where payment comes first","events":[],"recommendations":{}},{"name":"payoutInvestors","args":[{"type":"uint64","name":"invoiceId","desc":"- The invoice being paid"},{"type":"address[]","name":"investors","desc":"- Array of investor addresses"},{"type":"uint64[]","name":"amounts","desc":"- Array of amounts to pay each investor"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Pays out investors when invoice is paid (MVP - simplified payout)\nIn production, this would be triggered by actual payment verification","events":[],"recommendations":{}},{"name":"getInvoiceInfo","args":[{"type":"uint64","name":"invoiceId","desc":"- The invoice to query"}],"returns":{"type":"(address,address,uint64,uint64,uint64)","desc":"Basic invoice information as arrays"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get invoice details","events":[],"recommendations":{}},{"name":"getInvestment","args":[{"type":"uint64","name":"invoiceId","desc":"- The invoice"},{"type":"address","name":"investor","desc":"- The investor address"}],"returns":{"type":"uint64","desc":"Amount invested"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get investor's investment in an invoice","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"nextInvoiceId":{"keyType":"AVMString","valueType":"AVMUint64","key":"bmV4dEludm9pY2VJZA=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"invoiceSellers":{"keyType":"uint64","valueType":"address","prefix":"aXM="},"invoiceBuyers":{"keyType":"uint64","valueType":"address","prefix":"aWI="},"invoiceTotalAmounts":{"keyType":"uint64","valueType":"uint64","prefix":"aWE="},"invoiceAmountsRaised":{"keyType":"uint64","valueType":"uint64","prefix":"aXI="},"invoiceMinInvestments":{"keyType":"uint64","valueType":"uint64","prefix":"aW0="},"invoiceDueDates":{"keyType":"uint64","valueType":"uint64","prefix":"aWQ="},"invoiceStatuses":{"keyType":"uint64","valueType":"uint64","prefix":"c3Q="},"investments":{"keyType":"AVMBytes","valueType":"uint64","prefix":"aW52"}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[596],"errorMessage":"Arrays must have same length"},{"pc":[479],"errorMessage":"Below minimum investment"},{"pc":[369,380,415,431,448,458,461,507,568,579,640,727,733,742,753,763,793],"errorMessage":"Box must have value"},{"pc":[484],"errorMessage":"Exceeds funding need"},{"pc":[672],"errorMessage":"Index access is out of bounds"},{"pc":[364,403,563,725],"errorMessage":"Invoice does not exist"},{"pc":[418],"errorMessage":"Invoice must be active"},{"pc":[582],"errorMessage":"Invoice must be funded"},{"pc":[382],"errorMessage":"Invoice must be pending"},{"pc":[117,140,173,194,219,234],"errorMessage":"OnCompletion is not NoOp"},{"pc":[371],"errorMessage":"Only buyer can approve"},{"pc":[570],"errorMessage":"Only buyer can trigger payout"},{"pc":[467],"errorMessage":"Payment must go to seller"},{"pc":[644],"errorMessage":"Total payout must match invoice amount"},{"pc":[268],"errorMessage":"can only call when creating"},{"pc":[120,143,176,197,222,237],"errorMessage":"can only call when not creating"},{"pc":[277],"errorMessage":"check GlobalState exists"},{"pc":[207],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAQACCCYJAnN0AmliAmlhDW5leHRJbnZvaWNlSWQEFR98dQJpcwJpcgJpbQNpbnYxGEAAAysjZzEbQQDFggYE8qZOmAR82LV/BLsMaUIE17tyWgTquL5wBEFPqhw2GgCOBgB3AGgATwA6ABkAAiNDMRkURDEYRDYaATYaAogCfCcETFCwIkMxGRREMRhENhoBiAIvTwRPBFBPA1BPAlBMUCcETFCwIkMxGRREMRhENhoBNhoCNhoDiAFkIkMxGRREMRhEMRYiCUk4ECISRDYaAYgArSJDMRkURDEYRDYaAYgAeCJDMRkURDEYRDYaATYaAjYaAzYaBIgAEicETFCwIkMxGUD/ZzEYFEQiQ4oEASMrZURJIggrTGcWJwVLAVAxAL8pSwFQi/y/KksBUIv9Fxa/JwZLAVAjFkxLAb8nB0sCUIv+Fxa/gAJpZEsCUIv/Fxa/KEsCUEy/iYoBAIv/FxYpSwFQSb1FAUQxAEy+RBJEKExQSb5MF0xEFEQiFr+JigIAi/8XFicFSwFQSb1FAUQoSwJQSU4DvkwXTEQiEkQqSwJQvkwXSU4DTgREJwZLA1BJTgS+TBdJTgNOBUQnB0sEUL5MF0xETL5Ei/44BxJEi/44CElOBUlPAg9ETgIJDkSL/jgAUCcITFBJvUUBQQAoiwW+TBdMRIsESU4CCBaLBUy/iwMISRaLAky/iwEPQQAGJBaLAEy/iSNC/9uKAwCAAIv9FxZJKUsBUEm9RQFEMQBMvkQSRChMUEm+TBdMRCQSRIv+I1lJi/8jWUlOAhJEI0mLBosEDEEAGYv/VwIAiwZJTgIlC1uLBQiMBSIIjAZC/98qiwFQvkwXTESLBRJEI4wAiwCLAwxBAC2xi/5XAgCLAElOAoEgC4EgWIv/VwIASwIlC1uyCLIHIrIQI7IBsyIIjABC/8uBAxaLAky/iYoBBYv/FxYnBUsBUEm9RQFEvkQpSwJQvkQqSwNQvkwXTEQWJwZLBFC+TBdMRBYoTwVQvkwXTEQWiYoCAYv+FxaL/1AnCExQSb1FAUEACosAvkwXTEQWTIkjQv/5","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Tradeflow contract
 */
export type TradeflowArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createInvoice(address,uint64,uint64,uint64)uint64': {
      /**
       * - The company that will pay the invoice
       */
      buyer: string
      /**
       * - Total face value of the invoice in microAlgos
       */
      totalAmount: bigint | number
      /**
       * - Minimum investment amount in microAlgos
       */
      minInvestment: bigint | number
      /**
       * - Unix timestamp when invoice is due
       */
      dueDate: bigint | number
    }
    'approveInvoice(uint64)void': {
      /**
       * - The invoice to approve
       */
      invoiceId: bigint | number
    }
    'investInInvoice(pay,uint64)void': {
      /**
       * - The payment transaction (must be first in group)
       */
      payment: AppMethodCallTransactionArgument
      /**
       * - The invoice to invest in
       */
      invoiceId: bigint | number
    }
    'payoutInvestors(uint64,address[],uint64[])void': {
      /**
       * - The invoice being paid
       */
      invoiceId: bigint | number
      /**
       * - Array of investor addresses
       */
      investors: string[]
      /**
       * - Array of amounts to pay each investor
       */
      amounts: bigint[] | number[]
    }
    'getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)': {
      /**
       * - The invoice to query
       */
      invoiceId: bigint | number
    }
    'getInvestment(uint64,address)uint64': {
      /**
       * - The invoice
       */
      invoiceId: bigint | number
      /**
       * - The investor address
       */
      investor: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createInvoice(address,uint64,uint64,uint64)uint64': [buyer: string, totalAmount: bigint | number, minInvestment: bigint | number, dueDate: bigint | number]
    'approveInvoice(uint64)void': [invoiceId: bigint | number]
    'investInInvoice(pay,uint64)void': [payment: AppMethodCallTransactionArgument, invoiceId: bigint | number]
    'payoutInvestors(uint64,address[],uint64[])void': [invoiceId: bigint | number, investors: string[], amounts: bigint[] | number[]]
    'getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)': [invoiceId: bigint | number]
    'getInvestment(uint64,address)uint64': [invoiceId: bigint | number, investor: string]
  }
}

/**
 * The return type for each method
 */
export type TradeflowReturns = {
  'createInvoice(address,uint64,uint64,uint64)uint64': bigint
  'approveInvoice(uint64)void': void
  'investInInvoice(pay,uint64)void': void
  'payoutInvestors(uint64,address[],uint64[])void': void
  'getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)': [string, string, bigint, bigint, bigint]
  'getInvestment(uint64,address)uint64': bigint
}

/**
 * Defines the types of available calls and state of the Tradeflow smart contract.
 */
export type TradeflowTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createInvoice(address,uint64,uint64,uint64)uint64' | 'createInvoice', {
      argsObj: TradeflowArgs['obj']['createInvoice(address,uint64,uint64,uint64)uint64']
      argsTuple: TradeflowArgs['tuple']['createInvoice(address,uint64,uint64,uint64)uint64']
      /**
       * The new invoice ID
       */
      returns: TradeflowReturns['createInvoice(address,uint64,uint64,uint64)uint64']
    }>
    & Record<'approveInvoice(uint64)void' | 'approveInvoice', {
      argsObj: TradeflowArgs['obj']['approveInvoice(uint64)void']
      argsTuple: TradeflowArgs['tuple']['approveInvoice(uint64)void']
      returns: TradeflowReturns['approveInvoice(uint64)void']
    }>
    & Record<'investInInvoice(pay,uint64)void' | 'investInInvoice', {
      argsObj: TradeflowArgs['obj']['investInInvoice(pay,uint64)void']
      argsTuple: TradeflowArgs['tuple']['investInInvoice(pay,uint64)void']
      returns: TradeflowReturns['investInInvoice(pay,uint64)void']
    }>
    & Record<'payoutInvestors(uint64,address[],uint64[])void' | 'payoutInvestors', {
      argsObj: TradeflowArgs['obj']['payoutInvestors(uint64,address[],uint64[])void']
      argsTuple: TradeflowArgs['tuple']['payoutInvestors(uint64,address[],uint64[])void']
      returns: TradeflowReturns['payoutInvestors(uint64,address[],uint64[])void']
    }>
    & Record<'getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)' | 'getInvoiceInfo', {
      argsObj: TradeflowArgs['obj']['getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)']
      argsTuple: TradeflowArgs['tuple']['getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)']
      /**
       * Basic invoice information as arrays
       */
      returns: TradeflowReturns['getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)']
    }>
    & Record<'getInvestment(uint64,address)uint64' | 'getInvestment', {
      argsObj: TradeflowArgs['obj']['getInvestment(uint64,address)uint64']
      argsTuple: TradeflowArgs['tuple']['getInvestment(uint64,address)uint64']
      /**
       * Amount invested
       */
      returns: TradeflowReturns['getInvestment(uint64,address)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        nextInvoiceId: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        invoiceSellers: Map<bigint | number, string>
        invoiceBuyers: Map<bigint | number, string>
        invoiceTotalAmounts: Map<bigint | number, bigint>
        invoiceAmountsRaised: Map<bigint | number, bigint>
        invoiceMinInvestments: Map<bigint | number, bigint>
        invoiceDueDates: Map<bigint | number, bigint>
        invoiceStatuses: Map<bigint | number, bigint>
        investments: Map<Uint8Array | string, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type TradeflowSignatures = keyof TradeflowTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TradeflowNonVoidMethodSignatures = keyof TradeflowTypes['methods'] extends infer T ? T extends keyof TradeflowTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Tradeflow smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TradeflowSignatures> = TradeflowTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Tradeflow smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TradeflowSignatures> = TradeflowTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = TradeflowTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = TradeflowTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type TradeflowCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type TradeflowDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TradeflowCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Tradeflow smart contract
 */
export abstract class TradeflowParamsFactory {
  /**
   * Constructs a no op call for the createInvoice(address,uint64,uint64,uint64)uint64 ABI method
   *
   * Creates a new invoice
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createInvoice(params: CallParams<TradeflowArgs['obj']['createInvoice(address,uint64,uint64,uint64)uint64'] | TradeflowArgs['tuple']['createInvoice(address,uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createInvoice(address,uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.buyer, params.args.totalAmount, params.args.minInvestment, params.args.dueDate],
    }
  }
  /**
   * Constructs a no op call for the approveInvoice(uint64)void ABI method
   *
   * Buyer approves an invoice, making it available for investment
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static approveInvoice(params: CallParams<TradeflowArgs['obj']['approveInvoice(uint64)void'] | TradeflowArgs['tuple']['approveInvoice(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'approveInvoice(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.invoiceId],
    }
  }
  /**
   * Constructs a no op call for the investInInvoice(pay,uint64)void ABI method
   *
  * Investor buys part of an invoice
  Must be called in a group transaction where payment comes first

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static investInInvoice(params: CallParams<TradeflowArgs['obj']['investInInvoice(pay,uint64)void'] | TradeflowArgs['tuple']['investInInvoice(pay,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'investInInvoice(pay,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment, params.args.invoiceId],
    }
  }
  /**
   * Constructs a no op call for the payoutInvestors(uint64,address[],uint64[])void ABI method
   *
  * Pays out investors when invoice is paid (MVP - simplified payout)
  In production, this would be triggered by actual payment verification

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static payoutInvestors(params: CallParams<TradeflowArgs['obj']['payoutInvestors(uint64,address[],uint64[])void'] | TradeflowArgs['tuple']['payoutInvestors(uint64,address[],uint64[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'payoutInvestors(uint64,address[],uint64[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.invoiceId, params.args.investors, params.args.amounts],
    }
  }
  /**
   * Constructs a no op call for the getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64) ABI method
   *
   * Get invoice details
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getInvoiceInfo(params: CallParams<TradeflowArgs['obj']['getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)'] | TradeflowArgs['tuple']['getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.invoiceId],
    }
  }
  /**
   * Constructs a no op call for the getInvestment(uint64,address)uint64 ABI method
   *
   * Get investor's investment in an invoice
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getInvestment(params: CallParams<TradeflowArgs['obj']['getInvestment(uint64,address)uint64'] | TradeflowArgs['tuple']['getInvestment(uint64,address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getInvestment(uint64,address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.invoiceId, params.args.investor],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Tradeflow smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TradeflowFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TradeflowFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TradeflowClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TradeflowClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Tradeflow smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TradeflowDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new TradeflowClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Tradeflow smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Tradeflow smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Tradeflow smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new TradeflowClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Tradeflow smart contract
 */
export class TradeflowClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TradeflowClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Tradeflow app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TradeflowClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TradeflowNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `TradeflowClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TradeflowClient> {
    return new TradeflowClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `TradeflowClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TradeflowClient> {
    return new TradeflowClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Tradeflow smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Tradeflow smart contract using the `createInvoice(address,uint64,uint64,uint64)uint64` ABI method.
     *
     * Creates a new invoice
     *
     * @param params The params for the smart contract call
     * @returns The call params: The new invoice ID
     */
    createInvoice: (params: CallParams<TradeflowArgs['obj']['createInvoice(address,uint64,uint64,uint64)uint64'] | TradeflowArgs['tuple']['createInvoice(address,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TradeflowParamsFactory.createInvoice(params))
    },

    /**
     * Makes a call to the Tradeflow smart contract using the `approveInvoice(uint64)void` ABI method.
     *
     * Buyer approves an invoice, making it available for investment
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    approveInvoice: (params: CallParams<TradeflowArgs['obj']['approveInvoice(uint64)void'] | TradeflowArgs['tuple']['approveInvoice(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TradeflowParamsFactory.approveInvoice(params))
    },

    /**
     * Makes a call to the Tradeflow smart contract using the `investInInvoice(pay,uint64)void` ABI method.
     *
    * Investor buys part of an invoice
    Must be called in a group transaction where payment comes first

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    investInInvoice: (params: CallParams<TradeflowArgs['obj']['investInInvoice(pay,uint64)void'] | TradeflowArgs['tuple']['investInInvoice(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TradeflowParamsFactory.investInInvoice(params))
    },

    /**
     * Makes a call to the Tradeflow smart contract using the `payoutInvestors(uint64,address[],uint64[])void` ABI method.
     *
    * Pays out investors when invoice is paid (MVP - simplified payout)
    In production, this would be triggered by actual payment verification

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    payoutInvestors: (params: CallParams<TradeflowArgs['obj']['payoutInvestors(uint64,address[],uint64[])void'] | TradeflowArgs['tuple']['payoutInvestors(uint64,address[],uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TradeflowParamsFactory.payoutInvestors(params))
    },

    /**
     * Makes a call to the Tradeflow smart contract using the `getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get invoice details
     *
     * @param params The params for the smart contract call
     * @returns The call params: Basic invoice information as arrays
     */
    getInvoiceInfo: (params: CallParams<TradeflowArgs['obj']['getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)'] | TradeflowArgs['tuple']['getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TradeflowParamsFactory.getInvoiceInfo(params))
    },

    /**
     * Makes a call to the Tradeflow smart contract using the `getInvestment(uint64,address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get investor's investment in an invoice
     *
     * @param params The params for the smart contract call
     * @returns The call params: Amount invested
     */
    getInvestment: (params: CallParams<TradeflowArgs['obj']['getInvestment(uint64,address)uint64'] | TradeflowArgs['tuple']['getInvestment(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TradeflowParamsFactory.getInvestment(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Tradeflow smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Tradeflow smart contract using the `createInvoice(address,uint64,uint64,uint64)uint64` ABI method.
     *
     * Creates a new invoice
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The new invoice ID
     */
    createInvoice: (params: CallParams<TradeflowArgs['obj']['createInvoice(address,uint64,uint64,uint64)uint64'] | TradeflowArgs['tuple']['createInvoice(address,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TradeflowParamsFactory.createInvoice(params))
    },

    /**
     * Makes a call to the Tradeflow smart contract using the `approveInvoice(uint64)void` ABI method.
     *
     * Buyer approves an invoice, making it available for investment
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    approveInvoice: (params: CallParams<TradeflowArgs['obj']['approveInvoice(uint64)void'] | TradeflowArgs['tuple']['approveInvoice(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TradeflowParamsFactory.approveInvoice(params))
    },

    /**
     * Makes a call to the Tradeflow smart contract using the `investInInvoice(pay,uint64)void` ABI method.
     *
    * Investor buys part of an invoice
    Must be called in a group transaction where payment comes first

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    investInInvoice: (params: CallParams<TradeflowArgs['obj']['investInInvoice(pay,uint64)void'] | TradeflowArgs['tuple']['investInInvoice(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TradeflowParamsFactory.investInInvoice(params))
    },

    /**
     * Makes a call to the Tradeflow smart contract using the `payoutInvestors(uint64,address[],uint64[])void` ABI method.
     *
    * Pays out investors when invoice is paid (MVP - simplified payout)
    In production, this would be triggered by actual payment verification

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    payoutInvestors: (params: CallParams<TradeflowArgs['obj']['payoutInvestors(uint64,address[],uint64[])void'] | TradeflowArgs['tuple']['payoutInvestors(uint64,address[],uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TradeflowParamsFactory.payoutInvestors(params))
    },

    /**
     * Makes a call to the Tradeflow smart contract using the `getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get invoice details
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Basic invoice information as arrays
     */
    getInvoiceInfo: (params: CallParams<TradeflowArgs['obj']['getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)'] | TradeflowArgs['tuple']['getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TradeflowParamsFactory.getInvoiceInfo(params))
    },

    /**
     * Makes a call to the Tradeflow smart contract using the `getInvestment(uint64,address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get investor's investment in an invoice
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Amount invested
     */
    getInvestment: (params: CallParams<TradeflowArgs['obj']['getInvestment(uint64,address)uint64'] | TradeflowArgs['tuple']['getInvestment(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TradeflowParamsFactory.getInvestment(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Tradeflow smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Tradeflow smart contract using the `createInvoice(address,uint64,uint64,uint64)uint64` ABI method.
     *
     * Creates a new invoice
     *
     * @param params The params for the smart contract call
     * @returns The call result: The new invoice ID
     */
    createInvoice: async (params: CallParams<TradeflowArgs['obj']['createInvoice(address,uint64,uint64,uint64)uint64'] | TradeflowArgs['tuple']['createInvoice(address,uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TradeflowParamsFactory.createInvoice(params))
      return {...result, return: result.return as unknown as (undefined | TradeflowReturns['createInvoice(address,uint64,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the Tradeflow smart contract using the `approveInvoice(uint64)void` ABI method.
     *
     * Buyer approves an invoice, making it available for investment
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    approveInvoice: async (params: CallParams<TradeflowArgs['obj']['approveInvoice(uint64)void'] | TradeflowArgs['tuple']['approveInvoice(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TradeflowParamsFactory.approveInvoice(params))
      return {...result, return: result.return as unknown as (undefined | TradeflowReturns['approveInvoice(uint64)void'])}
    },

    /**
     * Makes a call to the Tradeflow smart contract using the `investInInvoice(pay,uint64)void` ABI method.
     *
    * Investor buys part of an invoice
    Must be called in a group transaction where payment comes first

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    investInInvoice: async (params: CallParams<TradeflowArgs['obj']['investInInvoice(pay,uint64)void'] | TradeflowArgs['tuple']['investInInvoice(pay,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TradeflowParamsFactory.investInInvoice(params))
      return {...result, return: result.return as unknown as (undefined | TradeflowReturns['investInInvoice(pay,uint64)void'])}
    },

    /**
     * Makes a call to the Tradeflow smart contract using the `payoutInvestors(uint64,address[],uint64[])void` ABI method.
     *
    * Pays out investors when invoice is paid (MVP - simplified payout)
    In production, this would be triggered by actual payment verification

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    payoutInvestors: async (params: CallParams<TradeflowArgs['obj']['payoutInvestors(uint64,address[],uint64[])void'] | TradeflowArgs['tuple']['payoutInvestors(uint64,address[],uint64[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TradeflowParamsFactory.payoutInvestors(params))
      return {...result, return: result.return as unknown as (undefined | TradeflowReturns['payoutInvestors(uint64,address[],uint64[])void'])}
    },

    /**
     * Makes a call to the Tradeflow smart contract using the `getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get invoice details
     *
     * @param params The params for the smart contract call
     * @returns The call result: Basic invoice information as arrays
     */
    getInvoiceInfo: async (params: CallParams<TradeflowArgs['obj']['getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)'] | TradeflowArgs['tuple']['getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TradeflowParamsFactory.getInvoiceInfo(params))
      return {...result, return: result.return as unknown as (undefined | TradeflowReturns['getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the Tradeflow smart contract using the `getInvestment(uint64,address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get investor's investment in an invoice
     *
     * @param params The params for the smart contract call
     * @returns The call result: Amount invested
     */
    getInvestment: async (params: CallParams<TradeflowArgs['obj']['getInvestment(uint64,address)uint64'] | TradeflowArgs['tuple']['getInvestment(uint64,address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TradeflowParamsFactory.getInvestment(params))
      return {...result, return: result.return as unknown as (undefined | TradeflowReturns['getInvestment(uint64,address)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TradeflowClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Tradeflow smart contract using the `getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get invoice details
   *
   * @param params The params for the smart contract call
   * @returns The call result: Basic invoice information as arrays
   */
  async getInvoiceInfo(params: CallParams<TradeflowArgs['obj']['getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)'] | TradeflowArgs['tuple']['getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)']>) {
    const result = await this.appClient.send.call(TradeflowParamsFactory.getInvoiceInfo(params))
    return result.return as unknown as TradeflowReturns['getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the Tradeflow smart contract using the `getInvestment(uint64,address)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get investor's investment in an invoice
   *
   * @param params The params for the smart contract call
   * @returns The call result: Amount invested
   */
  async getInvestment(params: CallParams<TradeflowArgs['obj']['getInvestment(uint64,address)uint64'] | TradeflowArgs['tuple']['getInvestment(uint64,address)uint64']>) {
    const result = await this.appClient.send.call(TradeflowParamsFactory.getInvestment(params))
    return result.return as unknown as TradeflowReturns['getInvestment(uint64,address)uint64']
  }

  /**
   * Methods to access state for the current Tradeflow app
   */
  state = {
    /**
     * Methods to access global state for the current Tradeflow app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          nextInvoiceId: result.nextInvoiceId,
        }
      },
      /**
       * Get the current value of the nextInvoiceId key in global state
       */
      nextInvoiceId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("nextInvoiceId")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current Tradeflow app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the invoiceSellers map in box state
       */
      invoiceSellers: {
        /**
         * Get all current values of the invoiceSellers map in box state
         */
        getMap: async (): Promise<Map<bigint, string>> => { return (await this.appClient.state.box.getMap("invoiceSellers")) as Map<bigint, string> },
        /**
         * Get a current value of the invoiceSellers map by key from box state
         */
        value: async (key: bigint | number): Promise<string | undefined> => { return await this.appClient.state.box.getMapValue("invoiceSellers", key) as string | undefined },
      },
      /**
       * Get values from the invoiceBuyers map in box state
       */
      invoiceBuyers: {
        /**
         * Get all current values of the invoiceBuyers map in box state
         */
        getMap: async (): Promise<Map<bigint, string>> => { return (await this.appClient.state.box.getMap("invoiceBuyers")) as Map<bigint, string> },
        /**
         * Get a current value of the invoiceBuyers map by key from box state
         */
        value: async (key: bigint | number): Promise<string | undefined> => { return await this.appClient.state.box.getMapValue("invoiceBuyers", key) as string | undefined },
      },
      /**
       * Get values from the invoiceTotalAmounts map in box state
       */
      invoiceTotalAmounts: {
        /**
         * Get all current values of the invoiceTotalAmounts map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("invoiceTotalAmounts")) as Map<bigint, bigint> },
        /**
         * Get a current value of the invoiceTotalAmounts map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("invoiceTotalAmounts", key) as bigint | undefined },
      },
      /**
       * Get values from the invoiceAmountsRaised map in box state
       */
      invoiceAmountsRaised: {
        /**
         * Get all current values of the invoiceAmountsRaised map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("invoiceAmountsRaised")) as Map<bigint, bigint> },
        /**
         * Get a current value of the invoiceAmountsRaised map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("invoiceAmountsRaised", key) as bigint | undefined },
      },
      /**
       * Get values from the invoiceMinInvestments map in box state
       */
      invoiceMinInvestments: {
        /**
         * Get all current values of the invoiceMinInvestments map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("invoiceMinInvestments")) as Map<bigint, bigint> },
        /**
         * Get a current value of the invoiceMinInvestments map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("invoiceMinInvestments", key) as bigint | undefined },
      },
      /**
       * Get values from the invoiceDueDates map in box state
       */
      invoiceDueDates: {
        /**
         * Get all current values of the invoiceDueDates map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("invoiceDueDates")) as Map<bigint, bigint> },
        /**
         * Get a current value of the invoiceDueDates map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("invoiceDueDates", key) as bigint | undefined },
      },
      /**
       * Get values from the invoiceStatuses map in box state
       */
      invoiceStatuses: {
        /**
         * Get all current values of the invoiceStatuses map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("invoiceStatuses")) as Map<bigint, bigint> },
        /**
         * Get a current value of the invoiceStatuses map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("invoiceStatuses", key) as bigint | undefined },
      },
      /**
       * Get values from the investments map in box state
       */
      investments: {
        /**
         * Get all current values of the investments map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, bigint>> => { return (await this.appClient.state.box.getMap("investments")) as Map<Uint8Array, bigint> },
        /**
         * Get a current value of the investments map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("investments", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): TradeflowComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createInvoice(address,uint64,uint64,uint64)uint64 method call against the Tradeflow contract
       */
      createInvoice(params: CallParams<TradeflowArgs['obj']['createInvoice(address,uint64,uint64,uint64)uint64'] | TradeflowArgs['tuple']['createInvoice(address,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createInvoice(params)))
        resultMappers.push((v) => client.decodeReturnValue('createInvoice(address,uint64,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a approveInvoice(uint64)void method call against the Tradeflow contract
       */
      approveInvoice(params: CallParams<TradeflowArgs['obj']['approveInvoice(uint64)void'] | TradeflowArgs['tuple']['approveInvoice(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.approveInvoice(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a investInInvoice(pay,uint64)void method call against the Tradeflow contract
       */
      investInInvoice(params: CallParams<TradeflowArgs['obj']['investInInvoice(pay,uint64)void'] | TradeflowArgs['tuple']['investInInvoice(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.investInInvoice(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a payoutInvestors(uint64,address[],uint64[])void method call against the Tradeflow contract
       */
      payoutInvestors(params: CallParams<TradeflowArgs['obj']['payoutInvestors(uint64,address[],uint64[])void'] | TradeflowArgs['tuple']['payoutInvestors(uint64,address[],uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.payoutInvestors(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64) method call against the Tradeflow contract
       */
      getInvoiceInfo(params: CallParams<TradeflowArgs['obj']['getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)'] | TradeflowArgs['tuple']['getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getInvoiceInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a getInvestment(uint64,address)uint64 method call against the Tradeflow contract
       */
      getInvestment(params: CallParams<TradeflowArgs['obj']['getInvestment(uint64,address)uint64'] | TradeflowArgs['tuple']['getInvestment(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getInvestment(params)))
        resultMappers.push((v) => client.decodeReturnValue('getInvestment(uint64,address)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the Tradeflow contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TradeflowComposer
  }
}
export type TradeflowComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createInvoice(address,uint64,uint64,uint64)uint64 ABI method.
   *
   * Creates a new invoice
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createInvoice(params?: CallParams<TradeflowArgs['obj']['createInvoice(address,uint64,uint64,uint64)uint64'] | TradeflowArgs['tuple']['createInvoice(address,uint64,uint64,uint64)uint64']>): TradeflowComposer<[...TReturns, TradeflowReturns['createInvoice(address,uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the approveInvoice(uint64)void ABI method.
   *
   * Buyer approves an invoice, making it available for investment
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveInvoice(params?: CallParams<TradeflowArgs['obj']['approveInvoice(uint64)void'] | TradeflowArgs['tuple']['approveInvoice(uint64)void']>): TradeflowComposer<[...TReturns, TradeflowReturns['approveInvoice(uint64)void'] | undefined]>

  /**
   * Calls the investInInvoice(pay,uint64)void ABI method.
   *
  * Investor buys part of an invoice
  Must be called in a group transaction where payment comes first

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  investInInvoice(params?: CallParams<TradeflowArgs['obj']['investInInvoice(pay,uint64)void'] | TradeflowArgs['tuple']['investInInvoice(pay,uint64)void']>): TradeflowComposer<[...TReturns, TradeflowReturns['investInInvoice(pay,uint64)void'] | undefined]>

  /**
   * Calls the payoutInvestors(uint64,address[],uint64[])void ABI method.
   *
  * Pays out investors when invoice is paid (MVP - simplified payout)
  In production, this would be triggered by actual payment verification

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  payoutInvestors(params?: CallParams<TradeflowArgs['obj']['payoutInvestors(uint64,address[],uint64[])void'] | TradeflowArgs['tuple']['payoutInvestors(uint64,address[],uint64[])void']>): TradeflowComposer<[...TReturns, TradeflowReturns['payoutInvestors(uint64,address[],uint64[])void'] | undefined]>

  /**
   * Calls the getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64) ABI method.
   *
   * Get invoice details
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getInvoiceInfo(params?: CallParams<TradeflowArgs['obj']['getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)'] | TradeflowArgs['tuple']['getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)']>): TradeflowComposer<[...TReturns, TradeflowReturns['getInvoiceInfo(uint64)(address,address,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the getInvestment(uint64,address)uint64 ABI method.
   *
   * Get investor's investment in an invoice
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getInvestment(params?: CallParams<TradeflowArgs['obj']['getInvestment(uint64,address)uint64'] | TradeflowArgs['tuple']['getInvestment(uint64,address)uint64']>): TradeflowComposer<[...TReturns, TradeflowReturns['getInvestment(uint64,address)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Tradeflow smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TradeflowComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TradeflowComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TradeflowComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TradeflowComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TradeflowComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TradeflowComposerResults<TReturns>>
}
export type TradeflowComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

